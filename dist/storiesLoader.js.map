{"version":3,"sources":["../src/storiesLoader.ts"],"names":["YAML","dedent","fs","generate","path","getStorage","storage","babylon","traverse","transformStories","code","resource","ast","absYamlPath","patternClientYamlPath","wingsuit","pathItem","yamlPath","__require","generated","patternDefinitionFile","patternDefinition","patternIds","output","patternId","variants","variantName","variantLabel","formattedVariantLabel","variantCode","storiesLoader_default"],"mappings":"6PACA,OAAOA,MAAU,OACjB,OAAOC,MAAY,YACnB,OAAOC,MAAQ,KACf,OAAOC,MAAc,mBACrB,OAAOC,MAAU,OACjB,OAAS,cAAAC,MAAkB,oBAE3B,IAAMC,EAAUD,EAAW,EACrBE,EAAU,EAAQ,SAAS,EAC3BC,EAAW,EAAQ,gBAAgB,EAAE,QAE3C,SAASC,EAA4BC,EAAc,CACjD,GAAM,CAAE,SAAAC,CAAS,EAAI,KAAK,QAEpBC,EAAML,EAAQ,MAAMG,EAAM,CAC9B,WAAY,QACd,CAAC,EAEGG,EAAc,GACdC,EAAwB,GACxBC,EAAW,KA+Bf,GA7BAP,EAASI,EAAK,CAYZ,oBAAoBI,EAAe,CAIjC,GAHIA,EAAS,KAAK,aAAa,CAAC,EAAE,GAAG,OAAS,aAC5CD,EAAWC,EAAS,MAElBA,EAAS,KAAK,aAAa,CAAC,EAAE,GAAG,OAAS,oBAAqB,CACjE,IAAMC,EAAWD,EAAS,KAAK,aAAa,CAAC,EAAE,KAAK,UAAU,CAAC,EAAE,MAC7DC,EAAS,WAAW,GAAG,GAAKA,EAAS,WAAW,GAAG,GACrDJ,EAAcT,EAAK,KAAKA,EAAK,QAAQO,CAAQ,EAAGM,CAAQ,EACxDH,EAAwB,KAAKV,EAAK,SAASS,CAAW,MAEtDA,EAAcK,EAAQ,QAAQD,CAAQ,EACtCH,EAAwB,GAAGG,KAGjC,CACF,CAAC,EAEGJ,IAAgB,GAClB,OAAOH,EAGT,IAAMS,EAAYJ,EACdZ,EAASS,CAAG,EAAE,KACd,kCAAkCE,KAChCM,EAAwBlB,EAAG,aAAaW,EAAa,MAAM,EAC3DQ,EAAoBrB,EAAK,MAAMoB,CAAqB,EAEpDE,EAAa,OAAO,KAAKD,CAAiB,EAEhD,GAAI,CADqBC,EAAW,CAAC,EAEnC,MAAM,IAAI,MAAM,wBAAwBX,GAAU,EAMpD,IAAMY,EAAmB,CAAC,EAE1B,OAAAA,EAAO,KAAKtB;AAAA;AAAA;AAAA;AAAA,MAIRkB;AAAA;AAAA;AAAA;AAAA;AAAA,GAKH,EAEDG,EAAW,QAASE,GAAc,CAEhC,IAAMC,EADaJ,EAAkBG,CAAS,EAClB,UAAY,CAAE,UAAW,CAAE,MAAO,SAAU,CAAE,EAE1E,OAAO,KAAKC,CAAQ,EAAE,QAASC,GAAgB,CAC7C,IAAMC,EAAeF,EAASC,CAAW,EAAE,MACrCE,EAAwBD,EAAa,QAAQ,gBAAiB,GAAG,EACjEE,EAAcvB,EAAQ,YAAYkB,EAAWE,CAAW,EAAE,QAAQ,EAExEH,EAAO,KAAKtB;AAAA,gBACFuB,IAAYI;AAAA;AAAA;AAAA,6BAGCP,EAAkBG,CAAS,EAAE,aAAe;AAAA;AAAA;AAAA,sBAGnD,KAAK,UAAUK,CAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAOzBL,IAAYI;AAAA,mBAChBD;AAAA,+BACYH,mBAA2BE,oBAA8BF,QAAgBE;AAAA,gCACxEF,QAAgBE;AAAA,0CACNF,IAAYI;AAAA;AAAA,OAE/C,CACH,CAAC,CACH,CAAC,EAEML,EAAO,KAAK;AAAA,CAAI,CACzB,CAEA,IAAOO,EAAQrB","sourcesContent":["// TODO: DRY this out.  It reuses sections from preset.ts.\nimport YAML from \"yaml\";\nimport dedent from \"ts-dedent\";\nimport fs from \"fs\";\nimport generate from \"@babel/generator\";\nimport path from \"path\";\nimport { getStorage } from \"@cmbr/sb-patterns\";\n\nconst storage = getStorage();\nconst babylon = require(\"babylon\");\nconst traverse = require(\"babel-traverse\").default;\n\nfunction transformStories(this: any, code: string) {\n  const { resource } = this._module;\n\n  const ast = babylon.parse(code, {\n    sourceType: \"module\",\n  });\n\n  let absYamlPath = \"\";\n  let patternClientYamlPath = \"\";\n  let wingsuit = null;\n\n  traverse(ast, {\n    // Uncomment this after finding a way to import yaml files over require'ing.\n    /*ImportDeclaration(pathItem: any) {\n      if (pathItem.node.specifiers[0].local.name === 'patternDefinition') {\n        const yamlPath = pathItem.node.source.value;\n        if (yamlPath.startsWith('.') || yamlPath.startsWith('/')) {\n          absYamlPath = path.join(path.dirname(resource), yamlPath);\n        } else {\n          absYamlPath = require.resolve(yamlPath);\n        }\n      }\n    },*/\n    VariableDeclaration(pathItem: any) {\n      if (pathItem.node.declarations[0].id.name === \"wingsuit\") {\n        wingsuit = pathItem.node;\n      }\n      if (pathItem.node.declarations[0].id.name === \"patternDefinition\") {\n        const yamlPath = pathItem.node.declarations[0].init.arguments[0].value;\n        if (yamlPath.startsWith(\".\") || yamlPath.startsWith(\"/\")) {\n          absYamlPath = path.join(path.dirname(resource), yamlPath);\n          patternClientYamlPath = `./${path.basename(absYamlPath)}`;\n        } else {\n          absYamlPath = require.resolve(yamlPath);\n          patternClientYamlPath = `${yamlPath}`;\n        }\n      }\n    },\n  });\n\n  if (absYamlPath === \"\") {\n    return code;\n  }\n\n  const generated = wingsuit\n    ? generate(ast).code\n    : `import patternDefinition from '${patternClientYamlPath}'`;\n  const patternDefinitionFile = fs.readFileSync(absYamlPath, \"utf8\");\n  const patternDefinition = YAML.parse(patternDefinitionFile);\n\n  const patternIds = Object.keys(patternDefinition);\n  const defaultPatternId = patternIds[0];\n  if (!defaultPatternId) {\n    throw new Error(`No patterns found in ${resource}`);\n  }\n\n  // invokeHook(appConfig, 'patternLoaded', [defaultPatternId, defaultPattern]);\n  // invokeHook(appConfig, 'storyLoaded', [defaultPatternId, defaultPattern]);\n\n  const output: string[] = [];\n\n  output.push(dedent`\n    import { PatternPreview, argTypes, args, getStorage } from '@cmbr/sb-patterns';\n    const storage = getStorage();\n\n    ${generated}\n\n    export default {\n      component: PatternPreview\n    }\n  `);\n\n  patternIds.forEach((patternId) => {\n    const definition = patternDefinition[patternId];\n    const variants = definition.variants ?? { __default: { label: \"Default\" } };\n\n    Object.keys(variants).forEach((variantName) => {\n      const variantLabel = variants[variantName].label;\n      const formattedVariantLabel = variantLabel.replace(/[^a-zA-Z0-9]/g, \"_\");\n      const variantCode = storage.loadVariant(patternId, variantName).getCode();\n\n      output.push(dedent`\n        const ${patternId}${formattedVariantLabel}Parameters = {\n          docs: {\n            description: {\n              component: \\`${patternDefinition[patternId].description ?? \"\"}\\`\n            },\n            source: {\n              code: ${JSON.stringify(variantCode)},\n              language: 'jsx',\n              type: 'auto',\n              format: true\n            }\n          }\n        }\n        export const ${patternId}${formattedVariantLabel} = {\n          name: '${variantLabel}',\n          args: {patternId: '${patternId}', variantId: '${variantName}', ...args({}, '${patternId}', '${variantName}')},\n          argTypes: argTypes('${patternId}', '${variantName}'),\n          parameters: Object.assign({}, ${patternId}${formattedVariantLabel}Parameters, wingsuit.parameters || {}),\n        }\n      `);\n    });\n  });\n\n  return output.join(\"\\n\");\n}\n\nexport default transformStories;\n"]}